def mvnHome
def remote = [:]
    	remote.name = 'ansible'
    	remote.host = '172.31.8.43'
    	remote.user = 'centos'
    	remote.password = 'Rnstech@123'
    	remote.allowAnyHosts = true
def remote1 = [:]
    	remote1.name = 'kops'
    	remote1.host = '192.168.33.15'
    	remote1.user = 'centos'
    	remote1.password = 'Rnstech@123'
    	remote1.allowAnyHosts = true
pipeline {
    
	agent none
	
	stages {
		//def mvnHome
		stage ('Preparation') {
		    agent {
		        label 'BuildServer'
		    }
		    steps {
			    git 'https://github.com/venkat09docs/jenkins-project.git'
			    stash 'Source'
			    script{
			        mvnHome = tool 'maven3'
			    }
		    }
		}
        stage ('Setup Tools'){
            agent {
		        label 'BuildServer'
		    }
			steps{
            	//Sonar Tool
				sshCommand remote: remote, command: "cd jenkins-project; git pull"
				//sshCommand remote: remote, command: "cd jenkins-project; ansible-playbook -i hosts tools/sonarqube/sonar-install.yaml"
				//sshCommand remote: remote, command: "cd jenkins-project; ansible-playbook -i hosts tools/docker/docker-install.yml"

            	//Docker Tool
			}
        }
		stage('SonarQube Analysis') {
            agent {
		        label 'BuildServer'
		    }
			steps{
            	withSonarQubeEnv('sonar-7') { 
                	sh "${mvnHome}/bin/mvn sonar:sonar"
					//sh "${mvnHome}/bin/mvn sonar:sonar -Dsonar.projectKey=maven-java -Dsonar.host.url=http://ec2-18-140-117-66.ap-southeast-1.compute.amazonaws.com:9000 -Dsonar.login=2fa253ddc0e6423b8168159ca8d00b6dacc03d79"
					
				}
            	
			}
        }
    
		stage ('Run Unit Test Cases'){
			agent {
				label "BuildServer"
            }
			steps {
				sh "'${mvnHome}/bin/mvn' clean test"			
			}
			post {
                success {
                    junit 'target/surefire-reports/*.xml'                    
                }
            }
		}

		stage ('Build Artifacts'){
			agent {
				label "BuildServer"
            }
			steps {
				sh "'${mvnHome}/bin/mvn' clean package"			
			}
			post {
                success {
                    archiveArtifacts '**/*.war'
                    fingerprint '**/*.war'
                }
            }
		}

		stage('Docker Image') {
		     agent {
		        label 'BuildServer'
		    }
			steps{
				//Docker Image 
				sh 'docker build -t gvenkat/rnswebapp1:latest .'
			}	    
		    
    	}
        stage('Push Docker Image') {
		     agent {
		        label 'BuildServer'
		    }
			steps{
		    	withCredentials([string(credentialsId: 'docker-hub', variable: 'dockerPwd')]) {
 				    sh "docker login -u gvenkat -p ${dockerPwd}"
				}
					sh 'docker push gvenkat/rnswebapp1:latest'
			}
		    
    	}
        stage('Deploy to Staging') {
		     agent {
		        label 'BuildServer'
		    }
			steps{
		    	//Deploy to K8s Cluster 
				echo "Deploy to K8s Cluster"
			}		    
    	}
    	stage ('Integration-Test') {
			agent {
				label "BuildServer"
            }
			steps {
				parallel (
					'integration': { 
						unstash 'Source'
						sh "'${mvnHome}/bin/mvn' clean verify"
      							  						
					}, 'quality': {
						unstash 'Source'
						sh "'${mvnHome}/bin/mvn' clean test"
					}
				)
			}
		}
		stage ('approve') {
			agent {
				label "BuildServer"
            }
			steps {
				timeout(time: 7, unit: 'DAYS') {
					input message: 'Do you want to deploy?', submitter: 'admin'
				}
			}
		}
		stage ('Prod-Deploy') {
			agent {
				label "BuildServer"
            }
			steps{
				//Deploy to Prod Cluster
				echo "Deploy to Prod Cluster"
			}
		}
    	
	}	
}